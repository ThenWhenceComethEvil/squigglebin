#!/bin/bash
# vim: ft=bash tw=80 foldmethod=marker foldclose=all
#
# Ground-up rewrite of previous `conf`. Think I can make cleaner this time
# around.
#
# shellcheck disable=SC2178 #< gets confused with namerefs.
#
#-------------------------------------------------------------------------------
# TODO:
#  [ ] Easy diff & rollback functionality.
#
#-------------------------------------------------------------------------------
set -e

declare -gr DATA_FILE="${XDG_DATA_HOME:-${HOME}/.local/share/twce/conf}"/data
declare -gr DATA_DIR="${DATA_FILE%/*}"

mkdir -p "$DATA_DIR"
touch "$DATA_FILE"

# Database represented in bash as an array of 'entry' objects.
# DB := {
#     $nick1 := {path1, path2... pathN},
#     $nick2 := {path1, path2... pathN},
# }
declare -gA DB=()

# Maintain user's order.
declare -ga DB_ORDER=()

# Holds pointer to current entry array.
declare -g  ENTRY
declare -gi _ENTRY_NUM=0

# Argument parsing functions set params in this dict.
declare -ga ARGS
declare -gA KWARGS


function usage {
   local outfile
   case "$1" in
      0)  outfile=/dev/stdout ;;
      '') outfile=/dev/stdout ;;
      *)  outfile=/dev/stderr ;;
   esac

   cat <<EOF >"$outfile"
usage: ${BASH_SOURCE[0]##*/} command [param1..paramN] NICKNAME

commands:
   help CMD    prints help text for a given command
   edit ARGS   exec's \$EDITOR (with ARGS) for a given NICKNAME
   set  PATH+  sets PATH(s) for given NICKNAME
   dir         prints the dirname for a given NICKNAME
   sort        sorts entries in the database alphabetically
   db          exec's \$EDITOR on underlying database

Given only nickname, defaults to implicit \`edit\`:
   \$ conf bash         # these are
   \$ conf edit bash    # equivalent

EOF
exit "$1"
}

#                                    errors
#-------------------------------------------------------------------------------
#declare -ga ERRORS=()
#declare -gi _ERROR_NUM=0

# TODO: wire this up after core functionality is there.
#       Update: I don't know if it's really necessary. There are few times that
#       continuation after an error is possible, let alone helpful. Pretty much
#       just when parsing the config file.
#
#function new_error {
#   local error="_ERROR_$(( ++_ERROR_NUM ))"
#   declare -gA "$error"
#
#   local -n e="$error"
#   e['msg']=
#   e['line']=
#   e['level']=
#
#   ERRORS+=( "$error" )
#}
#
#
#declare -rA STATUS=(
#   ['help']=0           # User specifically passing --help
#   #...
#)

#                              database nonsense
#-------------------------------------------------------------------------------
function new_entry {
   local lineno="$1"  nick="$2"

   local entry="_ENTRY_$(( ++_ENTRY_NUM ))"
   declare -gA "$entry"

   local items="_ENTRY_ITEMS_${_ENTRY_NUM}"
   declare -ga "$items"

   local -n entry_r="$entry"
   entry_r['items']="$items"

   # *New* entries must be added to the DB order. Existing entries to be updated
   # must not be added twice.
   if [[ $lineno && $nick ]] ; then
      DB["$nick"]="$entry"
      DB_ORDER+=( "$nick" )
      entry_r['lineno']="$lineno"
   fi

   declare -g ENTRY="$entry"
}


function db_store {
   install --backup=numbered "$DATA_FILE"  "${DATA_DIR}/backup"

   { for nick in "${DB_ORDER[@]}" ; do
      local -n entry_r="${DB[$nick]}"
      local -n items_r="${entry_r['items']}"
      printf '%s\n'     "$nick"
      printf '   %s\n'  "${items_r[@]}"
      printf '\n'
   done } > "$DATA_FILE"
}


function db_load {
   local entry
   local -i lineno=0
   local -a files=()

   while IFS=$'\n' read -r line ; do
      (( ++lineno ))

      is_whitespace "$line" && continue
      is_comment    "$line" && continue

      if is_nick "$line" ; then
         new_entry "$lineno" "${BASH_REMATCH[1]}"
         continue
      fi

      if ! local -n entry_r="$ENTRY" 2>/dev/null ; then
         printf '(Unexpected indent on line %d.)\n'  "$lineno" >&2
         exit 1
      else
         local -n items_r="${entry_r['items']}"
      fi

      # TODO: this works... but it's pretty slow. Adds a pretty significant
      #       amount of time to the overall thing. Though I don't know if
      #       there's really any other way of doing thing.
      #
      # Expands literal db entries containing filename globs.
      mapfile -t files < <(
         xargs -I{} bash -c "printf '%s\n' {}" <<< "${line##* }"
      )

      items_r+=( "${files[@]}" )
   done < "$DATA_FILE"

   db_validate
}

function is_whitespace { [[ $1 =~ ^[[:space:]]*$   ]] ;}
function is_comment    { [[ $1 =~ ^[[:space:]]*#   ]] ;}
function is_nick       { [[ $1 =~ ^([^[:space:]]+) ]] ;}


function db_validate {
   local nick
   for nick in "${!DB[@]}" ; do
      local -n entry_r="${DB[$nick]}"
      local -n items_r="${entry_r['items']}"

      # TODO: maybe instead of exiting just print as a 'warning' and unset from
      #       the dict?
      if (( ! ${#items_r[@]} )) ; then
         printf "Nickname \`%s' has no associated paths.\n"  "$nick"
         exit 1
      fi

      local path
      for path in "${items_r[@]}" ; do
         if [[ ! -f $path ]] || [[ ! -r $path ]] ; then
            { printf '(Does not exist, or cannot read literal:\n'
              printf "  '%s'\n"  "$path"
              printf ')\n'
            } >&2
            exit 1
         fi
      done
   done
}

#                               command :: list
#----------------------------------------------------------------------------{{{
function usage_list {
   local outfile
   case "$1" in
      0)  outfile=/dev/stdout ;;
      '') outfile=/dev/stdout ;;
      *)  outfile=/dev/stderr ;;
   esac

   cat <<EOF >"$outfile"
usage: conf list

Lists all nicknames in db.

options:
   -h | --help    show this message and exit

EOF
exit "$1"
}


function parse_args_list {
   ARGS=() #; KWARGS=()

   while (( $# )) ; do
      case "$1" in
         -h | --help | help)
               usage_list 0
               ;;

         *)    ARGS+=( "$1" )
               shift
               ;;
      esac
   done

   if (( ${#ARGS[@]} > 1 )) ; then
      printf "(Command \`list' not expecting an argument.)\n\n" >&2
      usage_list 1
   fi
}


function cmd_list {
   parse_args_list "$@"

   while IFS=$'\n' read -r line ; do
      if is_comment "$line" ; then
         continue
      fi

      if is_nick "$line" ; then
         echo "${BASH_REMATCH[1]}"
      fi
   done < "$DATA_FILE"
}
#}}}

#                                command :: dir
#----------------------------------------------------------------------------{{{
function usage_dir {
   local outfile
   case "$1" in
      0)  outfile=/dev/stdout ;;
      '') outfile=/dev/stdout ;;
      *)  outfile=/dev/stderr ;;
   esac

   cat <<EOF >"$outfile"
usage: conf dir NICKNAME

\`cd\` to \`dirname NICK[0]\` in a subshell.

options:
   -h | --help    show this message and exit

EOF
exit "$1"
}


function parse_args_dir {
   ARGS=() #; KWARGS=()

   while (( $# )) ; do
      case "$1" in
         -h | --help | help)
               usage_dir 0
               ;;

         *)    ARGS+=( "$1" )
               shift
               ;;
      esac
   done

   if (( ${#ARGS[@]} > 1 )) ; then
      printf "(Command \`dir' expects only nickname.)\n\n" >&2
      usage_dir 1
   fi
}


function cmd_dir {
   parse_args_dir "$@"
   local nick="${ARGS[0]}"

   db_load
   local entry="${DB[$nick]}"
   if [[ ! $entry ]] ; then
      printf "(Nickname \`%s' does not exist.)\n"  "$nick"
      exit 1
   fi

   local -n entry_r="$entry"
   local -n items_r="${entry_r['items']}"

   printf '(in subshell, SHLVL is %d. <C-D> to exit.)\n'  "$(( SHLVL - 1))"
   cd "${items_r[0]%/*}"

   # There's a little bit of tomfoolery here. I want to overwrite PS1, but it's
   # set *after* any exported variables when .bashrc is read.
   #
   # shellcheck disable=SC2016 #< intentional variable in single quotes.
   /bin/bash --rcfile <( printf '
      . ~/.bashrc ; export PS1="[conf] ${PS1}"
   ')
}
#}}}

#                                command :: set
#----------------------------------------------------------------------------{{{
function usage_set {
cat <<EOF
usage: conf set NICK path1 [ ,pathN]

options:
   -h | --help    show this message and exit
   --             end of options, begin paths

EOF
exit "$1"
}


function parse_args_set {
   ARGS=() ; KWARGS=()

   while (( $# )) ; do
      case "$1" in
         -h | --help)
               usage_set 0
               ;;

         --)   shift ; break
               ;;

         *)    ARGS+=( "$1" )
               shift
               ;;
      esac
   done

   # Add any extra paths if user ended args with '--'.
   ARGS+=( "$@" )

   if (( ${#ARGS[@]} < 2 )) ; then
      printf "(Command \`set' expecting a nickname & path(s).)\n\n" >&2
      usage_set 1
   fi

   KWARGS['nick']="${ARGS[0]}"
   unset 'ARGS[0]'

   local idx path
   for idx in "${!ARGS[@]}" ; do
      path="${ARGS[idx]}"
      case "$path" in
         /*)   ;;
         ~*)   path="${path/\~/${HOME}}" ;;
         *)    path="${PWD}/${path}"     ;;
      esac

      # Re-write path as absolute.
      ARGS[idx]="$path"
   done
}


function cmd_set {
   parse_args_set "$@"
   local nick="${KWARGS['nick']}"

   db_load
   new_entry
   local entry="$ENTRY"
   local -n entry_r="$entry"
   local -n items_r="${entry_r['items']}"
   items_r=( "${ARGS[@]}" )

   if [[ ! ${DB[$nick]} ]] ; then
      DB_ORDER+=( "$nick" )
   fi

   DB["$nick"]="$entry"

   db_validate
   db_store
}
#}}}

#                                command :: edit
#----------------------------------------------------------------------------{{{
function usage_edit {
   local outfile
   case "$1" in
      0)  outfile=/dev/stdout ;;
      '') outfile=/dev/stdout ;;
      *)  outfile=/dev/stderr ;;
   esac

   cat <<EOF >"$outfile"
usage: conf edit [arg1, ...argN] nick

\`exec\`s $EDITOR w/ optional arguments.

options:
   -h | --help    show this message and exit
   --             end of options

EOF
exit "$1"
}


function parse_args_edit {
   ARGS=() #; KWARGS=()

   while (( $# )) ; do
      case "$1" in
         -h | --help)
               usage_edit 0
               ;;

         --)   shift ; break
               ;;

         *)    ARGS+=( "$1" )
               shift
               ;;
      esac
   done

   ARGS+=( "$@" )

   if (( ! ${#ARGS[@]} )) ; then
      printf "(Command \`edit' expects a nickname argument.)\n\n" >&2
      usage_edit 1
   fi
}


function cmd_edit {
   parse_args_edit "$@"

   local nick="${ARGS[-1]}"
   unset 'ARGS[-1]'

   db_load
   local entry="${DB[$nick]}"
   if [[ ! $entry ]] ; then
      printf "Nickname \`%s' does not exist.\n"  "$nick"
      exit 1
   fi

   local -n entry_r="$entry"
   local -n items_r="${entry_r['items']}"
   cd "${items_r[0]%/*}"
   exec $EDITOR  "${ARGS[@]}"  "${items_r[@]}"
}
#}}}

#                               command :: sort
#----------------------------------------------------------------------------{{{
function usage_sort {
   local outfile
   case "$1" in
      0)  outfile=/dev/stdout ;;
      '') outfile=/dev/stdout ;;
      *)  outfile=/dev/stderr ;;
   esac

   cat <<EOF >"$outfile"
usage: conf sort

Sorts conf's own database alphabetically in-place by nickname.

options:
   -h | --help    show this message and exit

EOF
exit "$1"
}


function parse_args_sort {
   if [[ ! $1 ]] ; then
      return 0
   fi

   case "$1" in
      -h | --help)
            usage_sort 0
            ;;

      *)    printf "(Command \`sort' takes no params.)\n\n" >&2
            usage_sort 1
            ;;
   esac
}


function cmd_sort {
   parse_args_sort "$@"

   db_load
   mapfile -t DB_ORDER < <(
      printf '%s\n' "${DB_ORDER[@]}" | sort
   )
   db_store
}
#}}}

#                               command :: clean
#----------------------------------------------------------------------------{{{
function usage_clean {
   local outfile
   case "$1" in
      0)  outfile=/dev/stdout ;;
      '') outfile=/dev/stdout ;;
      *)  outfile=/dev/stderr ;;
   esac

   cat <<EOF >"$outfile"
usage: conf clean [\`rm\` args]

Cleans all but the last 5 database backups.

options:
   -h | --help    show this message and exit

rm args:
   Defaults to \`-i\` (interactive removal). Can overwrite by passing additional
   args.

EOF
exit "$1"
}


function parse_args_clean {
   ARGS=() #; KWARGS=()

   while (( $# )) ; do
      case "$1" in
         -h | --help | help)
               usage_clean 0
               ;;

         --)   shift ; break
               ;;

         *)    ARGS+=( "$1" )
               shift
               ;;
      esac
   done

   ARGS+=( "$@" )
}


function cmd_clean {
   parse_args_clean "$@"

   # Default to 'interactive'.
   local -a rm=( -i )
   if (( ${#ARGS[@]} )) ; then
      rm=( "${ARGS[@]}" )
   fi

   local -a stat=(
      --printf='%Y %n\n'
      "${DATA_DIR}"/backup.~*
   )

   stat "${stat[@]}" 2>&- \
   | sort                 \
   | cut -d' ' -f2        \
   | head --lines=-5      \
   | xargs rm "${rm[@]}"
}
#}}}

#                                command :: db
#----------------------------------------------------------------------------{{{
function usage_db {
   local outfile
   case "$1" in
      0)  outfile=/dev/stdout ;;
      '') outfile=/dev/stdout ;;
      *)  outfile=/dev/stderr ;;
   esac

   cat <<EOF >"$outfile"
usage: conf db [arg1..argN]

\`exec\`s $EDITOR on conf's own database w/ optional arguments.

options:
   -h | --help    show this message and exit
   --             end of options

EOF
exit "$1"
}


function parse_args_db {
   ARGS=() #; KWARGS=()

   while (( $# )) ; do
      case "$1" in
         -h | --help)
               usage_db 0
               ;;

         --)   shift ; break
               ;;

         *)    ARGS+=( "$1" )
               shift
               ;;
      esac
   done

   ARGS+=( "$@" )
}


function cmd_db {
   parse_args_db "$@"
   exec $EDITOR  "${ARGS[@]}"  "${DATA_FILE}"
}
#}}}

#                               command :: help
#----------------------------------------------------------------------------{{{
function cmd_help {
   local -A valid=()
   for opt in "${!opts[@]}" ; do
      valid["$opt"]=1
   done

   # Ignore `conf help help`.
   unset 'valid[help]'

   if [[ ! ${valid[${1:-_}]} ]] ; then
      { printf "(Command \`help' expecting exactly one of...\n"
         printf ' %s\n'  "${!valid[@]}"
         printf ')\n\n'
      } >&2
      exit 1
   fi

   usage_"$1" 0
}
#}}}

#                                    engage
#-------------------------------------------------------------------------------
if (( ! $# )) ; then
   usage 0
fi

declare -ga  possible=()
declare -grA opts=(
   ['help']=1
   ['edit']=1
   ['set']=1
   ['dir']=1
   ['sort']=1
   ['clean']=1
   ['list']=1
   ['fmt']=1
   ['db']=1
)

declare cmd="$1"

# Only necessary if $1 is not an exact match for an option. Uses `compgen` to
# expand to a command. E.g., `conf c` -> `conf clean`.
if [[ ! ${opts[$cmd]} ]] ; then
   mapfile -t possible < <(
      compgen -W "${!opts[*]}" -- "$1"
   )

   if (( ${#possible[@]} > 1 )) ; then
      { printf "(Ambiguous command \`%s' can be...\n"  "$1"
        printf ' %s\n'  "${possible[@]}"
        printf ')\n'
      } >&2
      exit 1
   fi

   cmd="${possible[0]}"
fi

case "$cmd" in
   -h | --help)
            usage 0                   ;;
   'help')  cmd_help        "${@:2}"  ;;
   'set')   cmd_set         "${@:2}"  ;;
   'dir')   cmd_dir         "${@:2}"  ;;
   'sort')  cmd_sort        "${@:2}"  ;;
   'clean') cmd_clean       "${@:2}"  ;;
   'db')    cmd_db          "${@:2}"  ;;
   'list')  cmd_list        "${@:2}"  ;;
   'edit')  cmd_edit        "${@:2}"  ;;
   '')      cmd_edit        "${@}"    ;;

   # End of args, if use wants a reserved word above as a nickname.
   '--')    shift
            cmd_edit        "${@}"    ;;
esac
