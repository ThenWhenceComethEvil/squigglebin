#!/bin/bash
# shellcheck disable=SC2207
#
# Stack based, low-typing, directory management. Sorta like pushd/popd, but
# different.
#
# ref.
# https://notes.burke.libbey.me/ansi-escape-codes/

declare -ax _DIR_STACK=()

function _d_init {
   for __ in {1..7} ; do
      printf '\n'
   done
   printf '\e[7F> '
}


function _d_bye {
   printf '\e[G\e[K'

   for __ in {1..6}; do
      printf '\e[E\e[K'
   done

   printf '\e[6F'
   printf 'Bye.\n'
}


function _d_data {
   local -a lines=()

   local d
   for d in "${_DIR_STACK[@]::5}" ; do
      lines=(
         $(realpath -ms "$d")
         "${lines[@]}"
      )
   done

   local space
   for (( space=(5 - ${#lines[@]}); space>0; space-- )) ; do
      lines+=( '' )
   done

   printf '\e[G\e[K'
   printf '\e[E\e[K'

   local data
   for data in "${lines[@]/$HOME/'~'}" ; do
      printf '\e[E\e[K%s' "$data"
   done

   #printf '\e[6F\e[4C%s\e[G'  "${PWD/$HOME/'~'}"
   printf '\e[6F\e'
}


function d0 {
   while (( $# )) ; do
      case "$1" in
         d) # DUP top entry on the stack.
            shift
            (( ${#_DIR_STACK[@]} )) || return 0
            _DIR_STACK+=( "${_DIR_STACK[-1]}" )
            ;;

         s) # SWAP top two dirs on the stack.
            shift
            (( ${#_DIR_STACK[@]} >= 2 )) || return 1
            _DIR_STACK+=( "${_DIR_STACK[-2]}" )
            unset '_DIR_STACK[-3]'

            _DIR_STACK=( "${_DIR_STACK[@]}" ) # patch holes
            ;;

         p) # PUSH cwd.
            shift
            _DIR_STACK+=( "$PWD" )
            ;;

         t) # TOGGLE between the top two directories:  SWAP DUP .
            shift
            set -- sd,. "$@"
            echo "$@"
            ;;

         l) # LIST directories on the stack.
            shift
            (( ${#_DIR_STACK[@]} )) || return 0
            realpath -ms --relative-base="$PWD"  "${_DIR_STACK[@]::5}" \
            | sed "s,${HOME},~," \
            | column -t          \
            | tac                \
            | nl -v1
            ;;

         r) # ROT all directories upwards.
            (( ${#_DIR_STACK[@]} )) || return 0
            _DIR_STACK=(
               "${_DIR_STACK[-1]}"
               "${_DIR_STACK[@]::${#_DIR_STACK[@]}-1}"
            )
            cd "${_DIR_STACK[-1]}" || return 1
            ;;

         '.') # POP top, don't `cd`
            shift ; unset '_DIR_STACK[-1]'
            ;;

         ',') # `cd` and don't POP
            shift
            (( ${#_DIR_STACK[@]} )) || continue
            cd "${_DIR_STACK[-1]}" || return 1
            ;;

         ??*) 
            set -- "${1::1}" "${1:1}" "${@:2}"
            ;;

         ';') break ;;
      esac
   done
}


function d {
   _d_init
   _d_data

   trap '_d_bye ; return 0' SIGINT

   local c
   while IFS= read -s -d '' -r -n1 c ; do
      if [[ "$c" != $'\n' ]] ; then
         printf '\e[G\e[K %s' "$c"
      fi

      case "$c" in
         d) # DUP top entry on the stack.
            (( ${#_DIR_STACK[@]} )) || continue
            _DIR_STACK+=( "${_DIR_STACK[-1]}" )
            ;;
         
         s) # SWAP top two dirs on the stack.
            (( ${#_DIR_STACK[@]} >= 2 )) || continue
            _DIR_STACK+=( "${_DIR_STACK[-2]}" )
            unset '_DIR_STACK[-3]'

            _DIR_STACK=( "${_DIR_STACK[@]}" ) # patch holes
            cd "${_DIR_STACK[-1]}" || continue
            ;;

         p) # PUSH cwd.
            _DIR_STACK+=( "$PWD" )
            ;;

         '.') # POP top, don't `cd`
            unset '_DIR_STACK[-1]'
            ;;

         r) # ROT all directories upwards.
            (( ${#_DIR_STACK[@]} )) || continue
            _DIR_STACK=(
               "${_DIR_STACK[-1]}"
               "${_DIR_STACK[@]::${#_DIR_STACK[@]}-1}"
            )
            cd "${_DIR_STACK[-1]}" || continue
            ;;

         # `cd` to top of stack
         $'\n')
            (( ${#_DIR_STACK[@]} )) || continue
            if cd "${_DIR_STACK[-1]}" ; then
               _d_bye
               return 0
            fi
            ;;

         # Exit on ctrl+d, escape, `;'.
         '' | $'' | ';')
            _d_bye ; return 0 ;;
      esac

      _d_data
   done
}
