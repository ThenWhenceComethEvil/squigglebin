#!/bin/bash
# shellcheck disable=SC2030,SC2031,SC2016

declare -A wap_bssid=(
   ['f4:92:bf:70:0d:6e']='UDM'
   ['f4:92:bf:70:0d:6f']='UDM'
   ['74:ac:b9:59:53:ee']='UAP'
   ['74:ac:b9:59:53:ed']='UAP'
)

declare -- SSID
declare -l BSSID

# Output lines of `wpa_scan results`.
declare -a LINES=()

SSID=$(  iwgetid -r  )
BSSID=$( iwgetid -ra )

# Currently connected access point.
WAP="${wap_bssid[${BSSID:-_}]}"
WAP="${WAP:-${BSSID}}"


function usage {
cat <<EOF
usage: ${BASH_SOURCE[0]##*/} (BSSID | command [option])

command:
   help              show this message and exit
   select            use \`select\` to choose BSSID, roam to it
   rofi              use \`rofi\` to choose BSSID, roam to it
   list              display BSSID options for current SSID
   current           display currently connected WAP

options:
   -f | --force      force a re-scan, even if results are available
   -w | --wait INT   sleep <INT> seconds after scanning before
                     getting \`wpa_cli scan_results\`

Either roam directly to a specified BSSID...
   \$ roam 'f4:92:bf:70:0d:6e'

...or use a command above. If no options are specified, runs with
default:
   \$ roam select --wait 5

EOF
exit "$1"
}


function wpa_scan {
   # shellcheck disable=SC2155
   local early_results
   local -i early_count

   # If running several times back-to-back, there's a good chance the old
   # results are still valid. Potentially don't re-scan.
   early_results=$( sudo wpa_cli scan_results )
   early_count=$(grep -c "$SSID" <<< "${early_results}" )

   if (( __force || early_count < 2 )) ; then
      # Don't currently know a better option than just sleeping while waiting
      # for results.
      sudo wpa_cli scan >/dev/null ; sleep "$__wait"
   fi

   mapfile -t LINES < <(
      # Not a huge deal if we re-call `scan_results` here, it's very fast.
      sudo wpa_cli scan_results                                |
      awk -v "SSID=$SSID" 'match($0, SSID) {print $1 "\t" $3}' |
      sort -k2
   )
}


function pretty_lines {
   local n line
   for n in "${!LINES[@]}" ; do
      line="${LINES[n]}"

      [[ ${line} =~ ([[:xdigit:]:]+) ]]
      LINES[n]+=$'\t'
      LINES[n]+="${wap_bssid[${BASH_REMATCH[1]}]}"

      if [[ $line == "${BSSID}"* ]] ; then
         LINES[n]+=' <--'
      fi
   done
}

#                                   commands
#-------------------------------------------------------------------------------
function cmd_list {
   while (( $# )) ; do
      case "$1" in
         -f | --force)
               shift ; __force=1
               ;;

         -w | --wait)
               shift ; __wait="$1" ; shift

               ;;
         *)    printf 'Command `list` not expecting parameter [%s].'  "$1" >&2
               ;;
      esac
   done

   wpa_scan
   pretty_lines

   printf '%s\n' "${LINES[@]}"
}


function cmd_select {
   while (( $# )) ; do
      case "$1" in
         -f | --force)
               shift ; __force=1
               ;;

         -w | --wait)
               shift ; __wait="$1" ; shift

               ;;
         *)    printf 'Command `list` not expecting parameter [%s].'  "$1" >&2
               exit 1
               ;;
      esac
   done

   wpa_scan

   local bssid
   select bssid in "${LINES[@]}" ; do
      [[ $bssid ]] && break
   done

   sudo wpa_cli roam "${bssid%%[[:space:]]*}"
}


function cmd_rofi {
   while (( $# )) ; do
      case "$1" in
         -f | --force)
               shift ; __force=1
               ;;

         -w | --wait)
               shift ; __wait="$1" ; shift
               ;;

         *)    printf 'Command `list` not expecting parameter [%s].'  "$1" >&2
               exit 1
               ;;
      esac
   done

   wpa_scan
   pretty_lines

   params=(
      -dmenu
      -sep   '\n'
      -p     "roam"
   )
   rv=$( printf '%s\n' "${LINES[@]}" | rofi "${params[@]}" ) || exit 0
   awk '{print $1}' <<< "$rv" | xargs sudo wpa_cli roam
}

#                               argument parsing
#-------------------------------------------------------------------------------
# Flags
declare -gi __wait=7       # Seconds before `wpa_cli scan_results`
declare -gi __force=0      # Force re-scan, even if results are avilable
declare -gi __current=0    # Boolean. Display currently connected WAP?


# No args -- default to `select`.
if (( ! $# )) ; then
   # Shellcheck wants me to pass arguments to the function, even though it
   # intrinsically does not take any when invoked this way.
   # shellcheck disable=SC2119
   cmd_select ; exit $?
fi


declare -a opts=(
   '-h'
   '--help'
   'help'
   'select'
   'list'
   'rofi'
   'current'
)

mapfile -t choices < <(
   compgen -W "${opts[*]}" -- "$1"
)

if (( ${#choices[@]} == 1)) ; then
   set -- "${choices[0]}"  "${@:2}"
fi


case "$1" in
   list)    cmd_list    "${@:2}" ;;
   rofi)    cmd_rofi    "${@:2}" ;;
   select)  cmd_select  "${@:2}" ;;
   current) echo "$WAP"          ;;

   -h | --help | help)
            usage 0
            ;;

   *)       sudo wpa_cli roam "$1"
            ;;
esac
