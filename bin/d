#!/bin/bash
# shellcheck disable=SC2207
#
# Stack based, low-typing, directory management. Sorta like pushd/popd, but
# different.
#
# ref.
# https://notes.burke.libbey.me/ansi-escape-codes/

# Would've liked to use $DIRSTACK, but can't modify it. Would be cool to have
# better crossover with pushd/popd.
declare -ax _DIRSTACK

function _d_init {
   for _ in {1..7} ; do
      printf '\n'
   done

   printf '\e[7F'
   printf '   (. pop) (s swap) (d dup) (r rot) (u undo)'
   printf '\e[G'
}


function _d_bye {
   printf '\e[G\e[K'       # 0D

   for _ in {1..6}; do
      printf '\e[E\e[K'    # j0D
   done

   printf '\e[6F'          # 6k
   printf 'Bye.\n'
}


function _d_data {
   local -a lines=()

   local d
   for d in "${_DIRSTACK[@]::5}" ; do
      lines=(
         $(realpath -ms "$d")
         "${lines[@]}"
      )
   done

   local -i space
   for (( space=(5 - ${#lines[@]}); space>0; space-- )) ; do
      lines+=( '' )
   done

   printf '\e[E' # Advance past padding.

   local data
   for data in "${lines[@]/$HOME/'~'}" ; do
      printf '\e[E\e[K%s' "$data"   # j0Di
   done

   printf '\e[6F\e'     # 06k
}


function _d_usage {
   echo '(+ push) (s swap) (- pop) (, cd) (. pop/cd)'
}


function d {
   while (( $# )) ; do
      case "$1" in
         -h | --help)
            _d_usage
            return ;;


         '+') # PUSH next argument
            [[ -d "$2" ]] || return 1
            _DIRSTACK+=( $(realpath -s "$2") )
            shift 2
            ;;

         '-') # POP top
            shift
            (( ${#_DIRSTACK[@]} )) || continue
            unset '_DIRSTACK[-1]'
            ;;

         ',') # `cd` top
            shift
            (( ${#_DIRSTACK[@]} )) || continue
            cd "${_DIRSTACK[-1]}" || return $?
            ;;

         '.') # POP, `cd`
            set -- , - "$@"
            ;;

         d) # DUP top entry on the stack.
            shift
            (( ${#_DIRSTACK[@]} )) || return 0
            _DIRSTACK+=( "${_DIRSTACK[-1]}" )
            ;;

         s) # SWAP, `cd`
            set -- S, "$@"
            ;;

         S) # SWAP
            shift
            (( ${#_DIRSTACK[@]} >= 2 )) || return 1
            _DIRSTACK+=( "${_DIRSTACK[-2]}" )
            unset '_DIRSTACK[-3]'

            _DIRSTACK=( "${_DIRSTACK[@]}" ) # patch holes
            ;;

         r) # ROT all up
            shift
            (( ${#_DIRSTACK[@]} )) || return 0
            _DIRSTACK=(
               "${_DIRSTACK[-1]}"
               "${_DIRSTACK[@]::${#_DIRSTACK[@]}-1}"
            )
            cd "${_DIRSTACK[-1]}" || return 1
            ;;

         ??*) 
            set -- "${1::1}" "${1:1}" "${@:2}"
            ;;

         ';') break ;;

         *) _d_usage
            return ;;
      esac
   done

   (( ${#_DIRSTACK[@]} )) &&      \
   realpath                       \
      -ms                         \
      --relative-base="$PWD"      \
      "${_DIRSTACK[@]::5}"        \
   | sed "s,^\.\$,${PWD}   <-,"   \
   | sed "s,${HOME},~,"           \
   | column -t                    \
   | tac
}


function d- {
   _d_init
   _d_data

   # Fix accidental pop.
   local undo=''

   local c path
   while IFS= read -s -d '' -r -n1 c ; do
      case "$c" in
         d) # DUP top entry on the stack.
            (( ${#_DIRSTACK[@]} )) || continue
            _DIRSTACK+=( "${_DIRSTACK[-1]}" )
            ;;
         
         s) # SWAP top two dirs on the stack.
            (( ${#_DIRSTACK[@]} >= 2 )) || continue
            _DIRSTACK+=( "${_DIRSTACK[-2]}" )
            unset '_DIRSTACK[-3]'

            _DIRSTACK=( "${_DIRSTACK[@]}" ) # patch holes
            cd "${_DIRSTACK[-1]}" || continue
            ;;

         '.') # POP top, don't `cd`
            (( ${#_DIRSTACK[@]} )) || continue
            undo="${_DIRSTACK[-1]}"
            unset '_DIRSTACK[-1]'
            ;;

         r) # ROT all directories upwards.
            (( ${#_DIRSTACK[@]} )) || continue
            _DIRSTACK=(
               "${_DIRSTACK[-1]}"
               "${_DIRSTACK[@]::${#_DIRSTACK[@]}-1}"
            )
            cd "${_DIRSTACK[-1]}" || continue
            ;;


         # `cd` to top of stack
         ',' | $'\n')
            (( ${#_DIRSTACK[@]} )) || continue
            if cd "${_DIRSTACK[-1]}" ; then
               _d_bye
               return 0
            fi
            ;;

         u) # Undo last pop
            [[ $undo ]] || continue
            _DIRSTACK+=( "$undo" )
            undo=
            ;;

         # Exit on ctrl+d, escape, `;'.
         '' | $'' | ';')
            _d_bye ; return 0 ;;
      esac

      _d_data
   done
}
