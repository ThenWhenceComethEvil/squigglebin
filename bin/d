#!/bin/bash
#
# Stack based, low-typing, directory management. Sorta like pushd/popd, but
# different.

declare -ax _DIR_STACK=()

function _d_init {
   for __ in {1..7} ; do
      printf '\n'
   done
   printf '\e[7F> '
}


# TODO: CURRENT:
# Not entirely sure why, but the `$@` referenced in the function below is
# somehow taking the *script's* arguments. That's literally 0% how function
# arguments are supposed to work.
function _d_data {
   local -a lines=( "${@::5}" )

   local space
   for (( space=(5 - $#); space>0; space-- )) ; do
      lines+=( '' )
   done

   printf '\e[G\e[K'                    # Prompt
   printf '\e[E\e[K'                    # Padding

   local data
   for data in "${lines[@]}" ; do       # Data
      printf '\e[E\e[K%s' "$data"
   done

   printf '\e[7F> '
}


function d {
   while (( $# )) ; do
      case "$1" in
         # DUP top entry on the stack.
         d) shift
            (( ${#_DIR_STACK[@]} )) || return 0
            _DIR_STACK+=( "${_DIR_STACK[-1]}" )
            ;;

         # SWAP top two dirs on the stack.
         s) shift
            (( ${#_DIR_STACK[@]} >= 2 )) || return 1
            _DIR_STACK+=( "${_DIR_STACK[-2]}" )
            unset '_DIR_STACK[-3]'

            _DIR_STACK=( "${_DIR_STACK[@]}" ) # patch holes
            ;;

         # PUSH cwd.
         p) shift
            _DIR_STACK+=( "$PWD" )
            ;;

         # ROT dirs down.
         r) shift
            (( ${#_DIR_STACK[@]} >= 3 )) || return 1
            local a="${DIRSTACK[-1]}" ; unset 'DIRSTACK[-1]'
            local b="${DIRSTACK[-1]}" ; unset 'DIRSTACK[-1]'
            local c="${DIRSTACK[-1]}" ; unset 'DIRSTACK[-1]'
            DIRSTACK+=( "$c" "$a" "$b" )
            ;;

         # TOGGLE between the top two directories:  SWAP DUP .
         t) shift
            set -- s d . "$@"
            ;;

         # LIST directories on the stack.
         l) shift
            (( ${#_DIR_STACK[@]} )) || return 0
            realpath -ms --relative-base="$PWD"  "${_DIR_STACK[@]::5}" \
            | sed "s,${HOME},~," \
            | column -t          \
            | tac
            ;;

         # CYCLE all directories upwards.
         c) shift
            (( ${#_DIR_STACK[@]} )) || return 0
            _DIR_STACK=( "${_DIR_STACK[-1]}"  "${_DIR_STACK[@]::${#_DIR_STACK[@]}-1}" )
            ;;

         # Pops top of stack, `cd`
         '.')  shift
            (( ${#_DIR_STACK[@]} )) || return 1
            cd "${_DIR_STACK[-1]}" || return 1
            unset '_DIR_STACK[-1]'
            ;;

         ??*) 
            set -- "${1::1}" "${1:1}" "${@:2}"
            ;;
      esac
   done
}


function _d {
   local -a stack=()
   _d_init

   while IFS= read -srn1 c ; do
      case "$c" in
         #' ')
         #   printf '%s' "$c"
         #   d "${stack[@]}" ; stack=()
         #   ;;

         p) _d_data 'this' 'that'
            ;;
         
         r) _d_data ''
            ;;

         '' | ';')
            printf '\nBYE.\n' ; break ;;

         '	') :;; # Ignore tabs.

         *) printf '%s' "$c"
            stack+=( "$c" ) ;;
      esac
   done
}


_DIR_STACK=( ~/.config/i3 "$PWD" ~/hg/twce/awkdoc )
_d
